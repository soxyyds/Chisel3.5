circuit ALU :
  module ALU :
    input clock : Clock
    input reset : UInt<1>
    output io : { flip src1_in : UInt<32>, flip src2_in : UInt<32>, flip op_in : UInt<4>, flip valid_in : UInt<1>, flip flush_in : UInt<1>, flip pc_in : UInt<32>, flip imm_in : UInt<32>, flip is_branch : UInt<1>, flip is_jump : UInt<1>, result_out : UInt<32>, valid_out : UInt<1>, branch_out : UInt<1>, jump_addr : UInt<32>}

    wire result : UInt<32> @[ALU.scala 49:20]
    wire branch_taken : UInt<1> @[ALU.scala 50:26]
    wire next_pc : UInt<32> @[ALU.scala 51:21]
    result <= UInt<1>("h0") @[ALU.scala 54:10]
    branch_taken <= UInt<1>("h0") @[ALU.scala 55:16]
    next_pc <= UInt<1>("h0") @[ALU.scala 56:11]
    node _T = eq(UInt<4>("h0"), io.op_in) @[ALU.scala 59:20]
    when _T : @[ALU.scala 59:20]
      node _result_T = add(io.src1_in, io.src2_in) @[ALU.scala 60:44]
      node _result_T_1 = tail(_result_T, 1) @[ALU.scala 60:44]
      result <= _result_T_1 @[ALU.scala 60:30]
    else :
      node _T_1 = eq(UInt<4>("h1"), io.op_in) @[ALU.scala 59:20]
      when _T_1 : @[ALU.scala 59:20]
        node _result_T_2 = sub(io.src1_in, io.src2_in) @[ALU.scala 61:44]
        node _result_T_3 = tail(_result_T_2, 1) @[ALU.scala 61:44]
        result <= _result_T_3 @[ALU.scala 61:30]
      else :
        node _T_2 = eq(UInt<4>("h2"), io.op_in) @[ALU.scala 59:20]
        when _T_2 : @[ALU.scala 59:20]
          node _result_T_4 = bits(io.src2_in, 4, 0) @[ALU.scala 62:57]
          node _result_T_5 = dshl(io.src1_in, _result_T_4) @[ALU.scala 62:44]
          result <= _result_T_5 @[ALU.scala 62:30]
        else :
          node _T_3 = eq(UInt<4>("h3"), io.op_in) @[ALU.scala 59:20]
          when _T_3 : @[ALU.scala 59:20]
            node _result_T_6 = bits(io.src2_in, 4, 0) @[ALU.scala 63:57]
            node _result_T_7 = dshr(io.src1_in, _result_T_6) @[ALU.scala 63:44]
            result <= _result_T_7 @[ALU.scala 63:30]
          else :
            node _T_4 = eq(UInt<4>("h4"), io.op_in) @[ALU.scala 59:20]
            when _T_4 : @[ALU.scala 59:20]
              node _result_T_8 = asSInt(io.src1_in) @[ALU.scala 64:45]
              node _result_T_9 = bits(io.src2_in, 4, 0) @[ALU.scala 64:65]
              node _result_T_10 = dshr(_result_T_8, _result_T_9) @[ALU.scala 64:52]
              node _result_T_11 = asUInt(_result_T_10) @[ALU.scala 64:73]
              result <= _result_T_11 @[ALU.scala 64:30]
            else :
              node _T_5 = eq(UInt<4>("h5"), io.op_in) @[ALU.scala 59:20]
              when _T_5 : @[ALU.scala 59:20]
                node _result_T_12 = or(io.src1_in, io.src2_in) @[ALU.scala 65:44]
                result <= _result_T_12 @[ALU.scala 65:30]
              else :
                node _T_6 = eq(UInt<4>("h6"), io.op_in) @[ALU.scala 59:20]
                when _T_6 : @[ALU.scala 59:20]
                  node _result_T_13 = and(io.src1_in, io.src2_in) @[ALU.scala 66:44]
                  result <= _result_T_13 @[ALU.scala 66:30]
                else :
                  node _T_7 = eq(UInt<4>("h7"), io.op_in) @[ALU.scala 59:20]
                  when _T_7 : @[ALU.scala 59:20]
                    node _result_T_14 = xor(io.src1_in, io.src2_in) @[ALU.scala 67:44]
                    result <= _result_T_14 @[ALU.scala 67:30]
                  else :
                    node _T_8 = eq(UInt<4>("h8"), io.op_in) @[ALU.scala 59:20]
                    when _T_8 : @[ALU.scala 59:20]
                      node _result_T_15 = asSInt(io.src1_in) @[ALU.scala 68:45]
                      node _result_T_16 = asSInt(io.src2_in) @[ALU.scala 68:65]
                      node _result_T_17 = lt(_result_T_15, _result_T_16) @[ALU.scala 68:52]
                      result <= _result_T_17 @[ALU.scala 68:30]
                    else :
                      node _T_9 = eq(UInt<4>("h9"), io.op_in) @[ALU.scala 59:20]
                      when _T_9 : @[ALU.scala 59:20]
                        node _result_T_18 = lt(io.src1_in, io.src2_in) @[ALU.scala 69:45]
                        result <= _result_T_18 @[ALU.scala 69:30]
    when io.is_branch : @[ALU.scala 73:22]
      node _T_10 = eq(UInt<4>("hc"), io.op_in) @[ALU.scala 74:22]
      when _T_10 : @[ALU.scala 74:22]
        node _branch_taken_T = eq(io.src1_in, io.src2_in) @[ALU.scala 75:52]
        branch_taken <= _branch_taken_T @[ALU.scala 75:38]
      else :
        node _T_11 = eq(UInt<4>("hd"), io.op_in) @[ALU.scala 74:22]
        when _T_11 : @[ALU.scala 74:22]
          node _branch_taken_T_1 = neq(io.src1_in, io.src2_in) @[ALU.scala 76:52]
          branch_taken <= _branch_taken_T_1 @[ALU.scala 76:38]
        else :
          node _T_12 = eq(UInt<4>("he"), io.op_in) @[ALU.scala 74:22]
          when _T_12 : @[ALU.scala 74:22]
            node _T_13 = bits(io.op_in, 0, 0) @[ALU.scala 78:22]
            when _T_13 : @[ALU.scala 78:27]
              node _branch_taken_T_2 = lt(io.src1_in, io.src2_in) @[ALU.scala 79:38]
              branch_taken <= _branch_taken_T_2 @[ALU.scala 79:24]
            else :
              node _branch_taken_T_3 = asSInt(io.src1_in) @[ALU.scala 81:38]
              node _branch_taken_T_4 = asSInt(io.src2_in) @[ALU.scala 81:58]
              node _branch_taken_T_5 = lt(_branch_taken_T_3, _branch_taken_T_4) @[ALU.scala 81:45]
              branch_taken <= _branch_taken_T_5 @[ALU.scala 81:24]
          else :
            node _T_14 = eq(UInt<4>("hf"), io.op_in) @[ALU.scala 74:22]
            when _T_14 : @[ALU.scala 74:22]
              node _T_15 = bits(io.op_in, 0, 0) @[ALU.scala 85:22]
              when _T_15 : @[ALU.scala 85:27]
                node _branch_taken_T_6 = geq(io.src1_in, io.src2_in) @[ALU.scala 86:38]
                branch_taken <= _branch_taken_T_6 @[ALU.scala 86:24]
              else :
                node _branch_taken_T_7 = asSInt(io.src1_in) @[ALU.scala 88:38]
                node _branch_taken_T_8 = asSInt(io.src2_in) @[ALU.scala 88:59]
                node _branch_taken_T_9 = geq(_branch_taken_T_7, _branch_taken_T_8) @[ALU.scala 88:45]
                branch_taken <= _branch_taken_T_9 @[ALU.scala 88:24]
      node _next_pc_T = add(io.pc_in, io.imm_in) @[ALU.scala 92:43]
      node _next_pc_T_1 = tail(_next_pc_T, 1) @[ALU.scala 92:43]
      node _next_pc_T_2 = mux(branch_taken, _next_pc_T_1, UInt<1>("h0")) @[ALU.scala 92:19]
      next_pc <= _next_pc_T_2 @[ALU.scala 92:13]
    when io.is_jump : @[ALU.scala 96:20]
      node _result_T_19 = add(io.pc_in, UInt<3>("h4")) @[ALU.scala 97:24]
      node _result_T_20 = tail(_result_T_19, 1) @[ALU.scala 97:24]
      result <= _result_T_20 @[ALU.scala 97:12]
      branch_taken <= UInt<1>("h1") @[ALU.scala 98:18]
      node _T_16 = bits(io.op_in, 0, 0) @[ALU.scala 100:18]
      when _T_16 : @[ALU.scala 100:23]
        node _next_pc_T_3 = add(io.src1_in, io.imm_in) @[ALU.scala 101:30]
        node _next_pc_T_4 = tail(_next_pc_T_3, 1) @[ALU.scala 101:30]
        node _next_pc_T_5 = and(_next_pc_T_4, UInt<32>("hfffffffe")) @[ALU.scala 101:43]
        next_pc <= _next_pc_T_5 @[ALU.scala 101:15]
      else :
        node _next_pc_T_6 = add(io.pc_in, io.imm_in) @[ALU.scala 103:27]
        node _next_pc_T_7 = tail(_next_pc_T_6, 1) @[ALU.scala 103:27]
        next_pc <= _next_pc_T_7 @[ALU.scala 103:15]
    node _io_result_out_T = eq(io.flush_in, UInt<1>("h0")) @[ALU.scala 108:39]
    node _io_result_out_T_1 = and(io.valid_in, _io_result_out_T) @[ALU.scala 108:36]
    node _io_result_out_T_2 = mux(_io_result_out_T_1, result, UInt<1>("h0")) @[ALU.scala 108:23]
    io.result_out <= _io_result_out_T_2 @[ALU.scala 108:17]
    node _io_valid_out_T = eq(io.flush_in, UInt<1>("h0")) @[ALU.scala 109:35]
    node _io_valid_out_T_1 = and(io.valid_in, _io_valid_out_T) @[ALU.scala 109:32]
    io.valid_out <= _io_valid_out_T_1 @[ALU.scala 109:17]
    node _io_branch_out_T = eq(io.flush_in, UInt<1>("h0")) @[ALU.scala 110:35]
    node _io_branch_out_T_1 = and(io.valid_in, _io_branch_out_T) @[ALU.scala 110:32]
    node _io_branch_out_T_2 = and(_io_branch_out_T_1, branch_taken) @[ALU.scala 110:48]
    io.branch_out <= _io_branch_out_T_2 @[ALU.scala 110:17]
    node _io_jump_addr_T = eq(io.flush_in, UInt<1>("h0")) @[ALU.scala 111:39]
    node _io_jump_addr_T_1 = and(io.valid_in, _io_jump_addr_T) @[ALU.scala 111:36]
    node _io_jump_addr_T_2 = and(_io_jump_addr_T_1, branch_taken) @[ALU.scala 111:52]
    node _io_jump_addr_T_3 = mux(_io_jump_addr_T_2, next_pc, UInt<1>("h0")) @[ALU.scala 111:23]
    io.jump_addr <= _io_jump_addr_T_3 @[ALU.scala 111:17]

